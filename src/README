WACC COMPILER NOTES

AST:
The components of the AST are either one of the tow classes (implements WaccAST):
- Nodes of the AST :
-- Expr
-- All classes derived from Stat
-- Func
-- Program
--
 
- Objects that are not nodes implements ParseTreeReturnable : 
-- Arglist
-- Param
-- ParamList
-- Literals (contained within an Expr node)
-- Ops (same as above)
-- Types
-- 



Naming conventions:
- Nodes:
-- Must have a suffix AST.
- Not Nodes:
-- Do not.


Semantics that is implemented to be checked (write " - TESTED" for the ones tests are written):
- return type of function called should match the assignable it is matched to
- arguments of function call should match the params of the function
- expression types should check
- variables can't be redeclared in scope - TESTED
- variables are declared before use 
- if statments's expr should be bool - TESTED
- while statments's cond should be bool - TESTED
- return gets called only in a function
- return must return the type the function signature requires
- all elements of array liter must be of the same type

Sematics to be implemented
- Array bounds checking

Error Handling:
This is done by creating an ErrorRecord Object,(implentation tbd)


ERROR NODE HANDLING:
STAT - DONE
EXPR - DONE


Interfaces
Assignable - For identifiers, pair-elems, array-elems (able to be found in the symbol table)

Scope
    Scope is equivalent to symbolTable reference. So each statement has a reference to the symbol table, which also inherently defines the scope.
    
    
BACKEND=======================================================    

PseudoInstructions:
things to omit from pseudoinstructions:
- external declarations
- 



CFGNode TDD:

- Can create CFGNode with a PseudoInstruction.
- Can get used registers in the CFGNode.
- Can get DEfined registers in CFGNode.
- Can link CFGnodes together.
- Can traverse CFGNodes.

- the list, uses, must only contain REGISTERS that the instruction in the node uses, and DOESNT CHANGE THE VALUE OF
- the list, defs, must only contain REGISTERS that the instruction in the node uses, and DOES CHANGE THE VALUE OF



The list next:
- Branch instruction nodes must contain the two different CFGNodes that they can point to(except B).
- Return and exit instruction nodes do not point to anything.
- all other nodes must point to the node corresponding to the instruction after them in.


CFGLabelTable TDD:
- Can Add Lablels to it.
- Can insert a key and a value, key being a Label, value being a CFGNode.
- can babysit a cfg node
- can check that all babies are happy 
    
    
    
    
    
    
    
    
    
    
    
    
    