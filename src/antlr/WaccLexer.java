// Generated from ./WaccLexer.g4 by ANTLR 4.4
package antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class WaccLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		COMMENT=1, PLUS=2, MINUS=3, NOT=4, LEN=5, ORD=6, CHR=7, MUL=8, DIV=9, 
		MOD=10, GT=11, GTE=12, LT=13, LTE=14, EQ=15, NEQ=16, AND=17, OR=18, SEMICOLON=19, 
		OPEN_PARENTHESES=20, CLOSE_PARENTHESES=21, COMMA=22, ASSIGN=23, INTEGER=24, 
		BEGIN=25, IS=26, END=27, SKIP=28, READ=29, FREE=30, RETURN=31, EXIT=32, 
		PRINT=33, PRINTLN=34, IF=35, THEN=36, ELSE=37, FI=38, WHILE=39, DO=40, 
		DONE=41, NEWPAIR=42, CALL=43, FST=44, SND=45, INT=46, BOOL=47, CHAR=48, 
		STRING=49, PAIR=50, TRUE=51, FALSE=52, NULL=53, IDENT=54, OPEN_SQ_PARENTHESES=55, 
		CLOSE_SQ_PARENTHESES=56, STRING_LTR=57, CHAR_LTR=58, WS=59;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "':'", "';'"
	};
	public static final String[] ruleNames = {
		"COMMENT", "PLUS", "MINUS", "NOT", "LEN", "ORD", "CHR", "MUL", "DIV", 
		"MOD", "GT", "GTE", "LT", "LTE", "EQ", "NEQ", "AND", "OR", "SEMICOLON", 
		"OPEN_PARENTHESES", "CLOSE_PARENTHESES", "COMMA", "ASSIGN", "DIGIT", "INTEGER", 
		"BEGIN", "IS", "END", "SKIP", "READ", "FREE", "RETURN", "EXIT", "PRINT", 
		"PRINTLN", "IF", "THEN", "ELSE", "FI", "WHILE", "DO", "DONE", "NEWPAIR", 
		"CALL", "FST", "SND", "INT", "BOOL", "CHAR", "STRING", "PAIR", "TRUE", 
		"FALSE", "NULL", "IDENT", "OPEN_SQ_PARENTHESES", "CLOSE_SQ_PARENTHESES", 
		"STRING_LTR", "CHAR_LTR", "WS"
	};


	public WaccLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "WaccLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2=\u0179\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\3\2\3\2\7\2~\n\2\f\2\16\2\u0081\13\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4"+
		"\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3"+
		"\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3"+
		"\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3"+
		"\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\6\32\u00c2\n\32\r\32\16\32"+
		"\u00c3\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35"+
		"\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3"+
		"!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$"+
		"\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3)\3)\3"+
		")\3)\3)\3)\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3-\3-\3-\3"+
		"-\3-\3.\3.\3.\3.\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3"+
		"\61\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\64\3"+
		"\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\67\3\67\3\67\3\67\3\67\38\38\78\u015b\n8\f8\168\u015e\138\39\39"+
		"\3:\3:\3;\3;\7;\u0166\n;\f;\16;\u0169\13;\3;\3;\3<\3<\7<\u016f\n<\f<\16"+
		"<\u0172\13<\3<\3<\3=\3=\3=\3=\5\177\u0167\u0170\2>\3\3\5\4\7\5\t\6\13"+
		"\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'"+
		"\25)\26+\27-\30/\31\61\2\63\32\65\33\67\349\35;\36=\37? A!C\"E#G$I%K&"+
		"M\'O(Q)S*U+W,Y-[.]/_\60a\61c\62e\63g\64i\65k\66m\67o8q9s:u;w<y=\3\2\5"+
		"\5\2C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17\"\"\u017c\2\3\3\2\2\2\2\5\3"+
		"\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2"+
		"\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3"+
		"\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'"+
		"\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\63\3\2\2\2\2\65"+
		"\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3"+
		"\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2"+
		"\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2"+
		"[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3"+
		"\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2"+
		"\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\3{\3\2\2\2\5\u0086\3\2\2\2\7\u0088"+
		"\3\2\2\2\t\u008a\3\2\2\2\13\u008c\3\2\2\2\r\u0090\3\2\2\2\17\u0094\3\2"+
		"\2\2\21\u0098\3\2\2\2\23\u009a\3\2\2\2\25\u009c\3\2\2\2\27\u009e\3\2\2"+
		"\2\31\u00a0\3\2\2\2\33\u00a3\3\2\2\2\35\u00a5\3\2\2\2\37\u00a8\3\2\2\2"+
		"!\u00ab\3\2\2\2#\u00ae\3\2\2\2%\u00b1\3\2\2\2\'\u00b4\3\2\2\2)\u00b6\3"+
		"\2\2\2+\u00b8\3\2\2\2-\u00ba\3\2\2\2/\u00bc\3\2\2\2\61\u00be\3\2\2\2\63"+
		"\u00c1\3\2\2\2\65\u00c5\3\2\2\2\67\u00cb\3\2\2\29\u00ce\3\2\2\2;\u00d2"+
		"\3\2\2\2=\u00d7\3\2\2\2?\u00dc\3\2\2\2A\u00e1\3\2\2\2C\u00e8\3\2\2\2E"+
		"\u00ed\3\2\2\2G\u00f3\3\2\2\2I\u00fb\3\2\2\2K\u00fe\3\2\2\2M\u0103\3\2"+
		"\2\2O\u0108\3\2\2\2Q\u010b\3\2\2\2S\u0111\3\2\2\2U\u0114\3\2\2\2W\u0119"+
		"\3\2\2\2Y\u0121\3\2\2\2[\u0126\3\2\2\2]\u012a\3\2\2\2_\u012e\3\2\2\2a"+
		"\u0132\3\2\2\2c\u0137\3\2\2\2e\u013c\3\2\2\2g\u0143\3\2\2\2i\u0148\3\2"+
		"\2\2k\u014d\3\2\2\2m\u0153\3\2\2\2o\u0158\3\2\2\2q\u015f\3\2\2\2s\u0161"+
		"\3\2\2\2u\u0163\3\2\2\2w\u016c\3\2\2\2y\u0175\3\2\2\2{\177\7%\2\2|~\13"+
		"\2\2\2}|\3\2\2\2~\u0081\3\2\2\2\177\u0080\3\2\2\2\177}\3\2\2\2\u0080\u0082"+
		"\3\2\2\2\u0081\177\3\2\2\2\u0082\u0083\7\f\2\2\u0083\u0084\3\2\2\2\u0084"+
		"\u0085\b\2\2\2\u0085\4\3\2\2\2\u0086\u0087\7-\2\2\u0087\6\3\2\2\2\u0088"+
		"\u0089\7/\2\2\u0089\b\3\2\2\2\u008a\u008b\7#\2\2\u008b\n\3\2\2\2\u008c"+
		"\u008d\7n\2\2\u008d\u008e\7g\2\2\u008e\u008f\7p\2\2\u008f\f\3\2\2\2\u0090"+
		"\u0091\7q\2\2\u0091\u0092\7t\2\2\u0092\u0093\7f\2\2\u0093\16\3\2\2\2\u0094"+
		"\u0095\7e\2\2\u0095\u0096\7j\2\2\u0096\u0097\7t\2\2\u0097\20\3\2\2\2\u0098"+
		"\u0099\7,\2\2\u0099\22\3\2\2\2\u009a\u009b\7\61\2\2\u009b\24\3\2\2\2\u009c"+
		"\u009d\7\'\2\2\u009d\26\3\2\2\2\u009e\u009f\7@\2\2\u009f\30\3\2\2\2\u00a0"+
		"\u00a1\7@\2\2\u00a1\u00a2\7?\2\2\u00a2\32\3\2\2\2\u00a3\u00a4\7>\2\2\u00a4"+
		"\34\3\2\2\2\u00a5\u00a6\7>\2\2\u00a6\u00a7\7?\2\2\u00a7\36\3\2\2\2\u00a8"+
		"\u00a9\7?\2\2\u00a9\u00aa\7?\2\2\u00aa \3\2\2\2\u00ab\u00ac\7#\2\2\u00ac"+
		"\u00ad\7?\2\2\u00ad\"\3\2\2\2\u00ae\u00af\7(\2\2\u00af\u00b0\7(\2\2\u00b0"+
		"$\3\2\2\2\u00b1\u00b2\7~\2\2\u00b2\u00b3\7~\2\2\u00b3&\3\2\2\2\u00b4\u00b5"+
		"\7=\2\2\u00b5(\3\2\2\2\u00b6\u00b7\7*\2\2\u00b7*\3\2\2\2\u00b8\u00b9\7"+
		"+\2\2\u00b9,\3\2\2\2\u00ba\u00bb\7.\2\2\u00bb.\3\2\2\2\u00bc\u00bd\7?"+
		"\2\2\u00bd\60\3\2\2\2\u00be\u00bf\4\62;\2\u00bf\62\3\2\2\2\u00c0\u00c2"+
		"\5\61\31\2\u00c1\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c1\3\2\2\2"+
		"\u00c3\u00c4\3\2\2\2\u00c4\64\3\2\2\2\u00c5\u00c6\7d\2\2\u00c6\u00c7\7"+
		"g\2\2\u00c7\u00c8\7i\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca\7p\2\2\u00ca\66"+
		"\3\2\2\2\u00cb\u00cc\7k\2\2\u00cc\u00cd\7u\2\2\u00cd8\3\2\2\2\u00ce\u00cf"+
		"\7g\2\2\u00cf\u00d0\7p\2\2\u00d0\u00d1\7f\2\2\u00d1:\3\2\2\2\u00d2\u00d3"+
		"\7u\2\2\u00d3\u00d4\7m\2\2\u00d4\u00d5\7k\2\2\u00d5\u00d6\7r\2\2\u00d6"+
		"<\3\2\2\2\u00d7\u00d8\7t\2\2\u00d8\u00d9\7g\2\2\u00d9\u00da\7c\2\2\u00da"+
		"\u00db\7f\2\2\u00db>\3\2\2\2\u00dc\u00dd\7h\2\2\u00dd\u00de\7t\2\2\u00de"+
		"\u00df\7g\2\2\u00df\u00e0\7g\2\2\u00e0@\3\2\2\2\u00e1\u00e2\7t\2\2\u00e2"+
		"\u00e3\7g\2\2\u00e3\u00e4\7v\2\2\u00e4\u00e5\7w\2\2\u00e5\u00e6\7t\2\2"+
		"\u00e6\u00e7\7p\2\2\u00e7B\3\2\2\2\u00e8\u00e9\7g\2\2\u00e9\u00ea\7z\2"+
		"\2\u00ea\u00eb\7k\2\2\u00eb\u00ec\7v\2\2\u00ecD\3\2\2\2\u00ed\u00ee\7"+
		"r\2\2\u00ee\u00ef\7t\2\2\u00ef\u00f0\7k\2\2\u00f0\u00f1\7p\2\2\u00f1\u00f2"+
		"\7v\2\2\u00f2F\3\2\2\2\u00f3\u00f4\7r\2\2\u00f4\u00f5\7t\2\2\u00f5\u00f6"+
		"\7k\2\2\u00f6\u00f7\7p\2\2\u00f7\u00f8\7v\2\2\u00f8\u00f9\7n\2\2\u00f9"+
		"\u00fa\7p\2\2\u00faH\3\2\2\2\u00fb\u00fc\7k\2\2\u00fc\u00fd\7h\2\2\u00fd"+
		"J\3\2\2\2\u00fe\u00ff\7v\2\2\u00ff\u0100\7j\2\2\u0100\u0101\7g\2\2\u0101"+
		"\u0102\7p\2\2\u0102L\3\2\2\2\u0103\u0104\7g\2\2\u0104\u0105\7n\2\2\u0105"+
		"\u0106\7u\2\2\u0106\u0107\7g\2\2\u0107N\3\2\2\2\u0108\u0109\7h\2\2\u0109"+
		"\u010a\7k\2\2\u010aP\3\2\2\2\u010b\u010c\7y\2\2\u010c\u010d\7j\2\2\u010d"+
		"\u010e\7k\2\2\u010e\u010f\7n\2\2\u010f\u0110\7g\2\2\u0110R\3\2\2\2\u0111"+
		"\u0112\7f\2\2\u0112\u0113\7q\2\2\u0113T\3\2\2\2\u0114\u0115\7f\2\2\u0115"+
		"\u0116\7q\2\2\u0116\u0117\7p\2\2\u0117\u0118\7g\2\2\u0118V\3\2\2\2\u0119"+
		"\u011a\7p\2\2\u011a\u011b\7g\2\2\u011b\u011c\7y\2\2\u011c\u011d\7r\2\2"+
		"\u011d\u011e\7c\2\2\u011e\u011f\7k\2\2\u011f\u0120\7t\2\2\u0120X\3\2\2"+
		"\2\u0121\u0122\7e\2\2\u0122\u0123\7c\2\2\u0123\u0124\7n\2\2\u0124\u0125"+
		"\7n\2\2\u0125Z\3\2\2\2\u0126\u0127\7h\2\2\u0127\u0128\7u\2\2\u0128\u0129"+
		"\7v\2\2\u0129\\\3\2\2\2\u012a\u012b\7u\2\2\u012b\u012c\7p\2\2\u012c\u012d"+
		"\7f\2\2\u012d^\3\2\2\2\u012e\u012f\7k\2\2\u012f\u0130\7p\2\2\u0130\u0131"+
		"\7v\2\2\u0131`\3\2\2\2\u0132\u0133\7d\2\2\u0133\u0134\7q\2\2\u0134\u0135"+
		"\7q\2\2\u0135\u0136\7n\2\2\u0136b\3\2\2\2\u0137\u0138\7e\2\2\u0138\u0139"+
		"\7j\2\2\u0139\u013a\7c\2\2\u013a\u013b\7t\2\2\u013bd\3\2\2\2\u013c\u013d"+
		"\7u\2\2\u013d\u013e\7v\2\2\u013e\u013f\7t\2\2\u013f\u0140\7k\2\2\u0140"+
		"\u0141\7p\2\2\u0141\u0142\7i\2\2\u0142f\3\2\2\2\u0143\u0144\7r\2\2\u0144"+
		"\u0145\7c\2\2\u0145\u0146\7k\2\2\u0146\u0147\7t\2\2\u0147h\3\2\2\2\u0148"+
		"\u0149\7v\2\2\u0149\u014a\7t\2\2\u014a\u014b\7w\2\2\u014b\u014c\7g\2\2"+
		"\u014cj\3\2\2\2\u014d\u014e\7h\2\2\u014e\u014f\7c\2\2\u014f\u0150\7n\2"+
		"\2\u0150\u0151\7u\2\2\u0151\u0152\7g\2\2\u0152l\3\2\2\2\u0153\u0154\7"+
		"p\2\2\u0154\u0155\7w\2\2\u0155\u0156\7n\2\2\u0156\u0157\7n\2\2\u0157n"+
		"\3\2\2\2\u0158\u015c\t\2\2\2\u0159\u015b\t\3\2\2\u015a\u0159\3\2\2\2\u015b"+
		"\u015e\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015dp\3\2\2\2"+
		"\u015e\u015c\3\2\2\2\u015f\u0160\7]\2\2\u0160r\3\2\2\2\u0161\u0162\7_"+
		"\2\2\u0162t\3\2\2\2\u0163\u0167\7$\2\2\u0164\u0166\13\2\2\2\u0165\u0164"+
		"\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0168\3\2\2\2\u0167\u0165\3\2\2\2\u0168"+
		"\u016a\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016b\7$\2\2\u016bv\3\2\2\2\u016c"+
		"\u0170\7)\2\2\u016d\u016f\13\2\2\2\u016e\u016d\3\2\2\2\u016f\u0172\3\2"+
		"\2\2\u0170\u0171\3\2\2\2\u0170\u016e\3\2\2\2\u0171\u0173\3\2\2\2\u0172"+
		"\u0170\3\2\2\2\u0173\u0174\7)\2\2\u0174x\3\2\2\2\u0175\u0176\t\4\2\2\u0176"+
		"\u0177\3\2\2\2\u0177\u0178\b=\2\2\u0178z\3\2\2\2\b\2\177\u00c3\u015c\u0167"+
		"\u0170\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}